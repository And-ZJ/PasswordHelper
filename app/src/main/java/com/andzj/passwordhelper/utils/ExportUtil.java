package com.andzj.passwordhelper.utils;

import android.app.ProgressDialog;
import android.content.Context;
import android.widget.Toast;

import com.alibaba.fastjson.JSON;
import com.andzj.passwordhelper.bean.AccountPasswordInfo;
import com.andzj.passwordhelper.bean.EncryptionInfo;
import com.andzj.passwordhelper.encrypt.ExportEncryption;
import com.andzj.passwordhelper.encrypt.MyEncryption;
import com.andzj.passwordhelper.encrypt.RSAKey;

import java.io.File;
import java.io.FileWriter;
import java.security.PublicKey;
import java.util.Date;
import java.util.List;
/**
 * Created by zj on 2017/2/2.
 */

public class ExportUtil {

    public static String exportBackupFileOperation(Context context,String filename,String password,String passwordHint,String emailAddress,List<AccountPasswordInfo> infos)
    {
        if (filename == null || password == null || passwordHint == null || emailAddress == null ||  infos == null )
        {
            return null;
        }
        ProgressDialog progressDialog = new ProgressDialog(context);
        progressDialog.setTitle("正在导出,请稍候...");
        progressDialog.setCancelable(false);
        progressDialog.setProgress(0);
        progressDialog.setMax(infos.size());
        progressDialog.show();
        try
        {
            File exportFile = MyFileOperateUtils.getWritableEmptyExternalStoragePublicFile(MyApplication.DIR_APPLICATION_NAME,MyApplication.DIR_EXPORT_BACKUP_NAME + filename + ".phb");
            if (exportFile == null)
            {
                Toast.makeText(MyApplication.getContext(),"无法创建文件,请赋予存储权限,或检查剩余空间是否足够",Toast.LENGTH_SHORT).show();
                //Toast.makeText(MyApplication.getContext(),"无法创建文件,请赋予存储权限,或检查剩余空间是否足够",Toast.LENGTH_SHORT).show();
                progressDialog.dismiss();
                return null;
            }
            FileWriter exportWriter = new FileWriter(exportFile);
            String dateStr = MyTimeUtils.getMyTimeStr(new Date());
            exportWriter.write("--警告: 请勿编辑此文件。(Warning:Do not edit this file.)--");
            exportWriter.append("\n");
            exportWriter.write("!1.App:PasswordHelper");
            exportWriter.append("\n").flush();
            exportWriter.write("!2.Type:BackupFile  Date:"+ dateStr + "  Version:1.0");
            exportWriter.append("\n").flush();

            PublicKey exportDataPublicKey = RSAKey.getExportDataPublicKey();
            //密码进行加密
            String encryptedPassword = MyEncryption.encryptExportPassword(password,emailAddress);
            exportWriter.write("!3." + encryptedPassword);
            exportWriter.append("\n").flush();
            //加密密码提示
            exportWriter.write("!4." + MyEncryption.encryptDislodgeEmptyString(passwordHint,exportDataPublicKey));
            exportWriter.append("\n").flush();
            //对邮箱加密
            String encryptedEmail = MyEncryption.encryptDislodgeEmptyString(emailAddress,exportDataPublicKey);
            exportWriter.write("!5." + encryptedEmail);
            exportWriter.append("\n");

            //获取数据加密对象，准备对保存的帐号密码进行加密
            ExportEncryption exportEncryption = new ExportEncryption(password,emailAddress);

            for (int i =0;i<infos.size();i++)
            {
                progressDialog.setProgress(i);
                EncryptionInfo encryptionInfo = new EncryptionInfo(infos.get(i));
                String json = JSON.toJSONString(encryptionInfo);
                String encode = exportEncryption.encrypt(json,exportDataPublicKey);
                exportWriter.write(encode);
                exportWriter.append("\n").flush();
            }
            exportWriter.write("--警告: 文件结束。(Warning:File ending.)--");
            exportWriter.append("\n");
            exportWriter.flush();
            exportWriter.close();
            progressDialog.dismiss();
            return exportFile.getAbsolutePath();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        progressDialog.dismiss();
        return null;
    }

    public static String exportPasswordRecoveryFile(Context context,String encryptedPassword,String emailAddress)
    {
        if (encryptedPassword == null || emailAddress == null)
        {
            return null;
        }
        ProgressDialog progressDialog = new ProgressDialog(context);
        progressDialog.setTitle("正在生成密码找回文件,请稍候...");
        progressDialog.show();
        try
        {
            File exportFile = MyFileOperateUtils.getWritableEmptyExternalStoragePublicFile(MyApplication.DIR_APPLICATION_NAME,MyApplication.DIR_EXPORT_PASSWORD_RECOVERY_NAME + "PasswordRecovery.txt");
            if (exportFile == null)
            {
                Toast.makeText(MyApplication.getContext(),"无法创建文件,请赋予存储权限,或检查剩余空间是否足够",Toast.LENGTH_SHORT).show();
                //Toast.makeText(MyApplication.getContext(),"无法创建文件,请赋予存储权限,或检查剩余空间是否足够",Toast.LENGTH_SHORT).show();
                progressDialog.dismiss();
                return null;
            }
            FileWriter exportWriter = new FileWriter(exportFile);
            String dateStr = MyTimeUtils.getMyTimeStr(new Date());
            exportWriter.write("--警告: 请勿编辑此文件。(Warning:Do not edit this file.)--");
            exportWriter.append("\n");
            exportWriter.write("!1.App:PasswordHelper");
            exportWriter.append("\n").flush();
            exportWriter.write("!2.Type:PasswordRecoveryFile  Date:"+ dateStr + "  Version:1.0");
            exportWriter.append("\n").flush();
            exportWriter.write("!3." + encryptedPassword);
            exportWriter.append("\n").flush();
            exportWriter.write("!4." + emailAddress);
            exportWriter.append("\n").flush();
            exportWriter.write("--警告: 文件结束。(Warning:File ending.)--");
            exportWriter.append("\n");
            exportWriter.flush();
            exportWriter.close();
            progressDialog.dismiss();
            return exportFile.getAbsolutePath();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        progressDialog.dismiss();
        return null;
    }


}
